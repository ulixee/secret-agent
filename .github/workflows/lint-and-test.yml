name: Test Matrix

on:
  push:
    branches:
      - '*'
      - '!gh-pages'

jobs:
  lint:
    name: Lint

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      - name: Install Dependencies
        run: yarn install --immutable --network-timeout 1000000
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          HERO_REPLAY_SKIP_BINARY_DOWNLOAD: 1
          HERO_SKIP_DOWNLOAD: 1

      - name: Run "build" step
        run: NODE_OPTIONS=--max-old-space-size=4096 yarn tsc
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          HERO_REPLAY_SKIP_BINARY_DOWNLOAD: 1
          HERO_SKIP_DOWNLOAD: 1

      - name: Run  Lint
        run: NODE_OPTIONS=--max-old-space-size=4096 yarn lint

      - name: 'Tar files'
        run: tar -cvf js_files.tar --exclude=node_modules --exclude=dist ./build

      - name: Upload built Javascript files
        uses: actions/upload-artifact@v2
        with:
          name: js-build
          path: js_files.tar
          retention-days: 1

  test:
    name: Test Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
    needs: lint
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node-version: [14, 16]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Download built typescript files
        uses: actions/download-artifact@v2
        with:
          name: js-build
          path: .

      - name: Untar files
        run: tar -xf js_files.tar

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Copy mitm source
        run: cp -r hero/mitm-socket/go build/hero/mitm-socket/go

      - name: Build modules
        run: yarn --network-timeout 1000000
        working-directory: ./build
        env:
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          HERO_REPLAY_SKIP_BINARY_DOWNLOAD: 1
          HERO_REBUILD_MITM_SOCKET: 1

      - name: Linux - Apt Install Chrome(s)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        working-directory: ./build
        run: sudo $(npx install-browser-deps)

      - name: Run tests
        run: yarn jest --testTimeout=60000 --maxWorkers=2
        working-directory: ./build
        env:
          HERO_SHOW_REPLAY: false
          NODE_ENV: test
          HERO_SESSIONS_DIR: hero/.sessions

      - name: 'Tar files'
        if: ${{ failure() }}
        run: tar -cvf test-dbs.tar ./build/hero/.sessions

      - name: Upload Databases
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-dbs-${{matrix.os}}-${{ matrix.node-version }}
          path: test-dbs.tar
          retention-days: 1

      - name: Coverage
        run: npm -g install codecov && codecov
        working-directory: ./build
        if: ${{ matrix.node-version == '14' && matrix.os == 'ubuntu-latest' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
