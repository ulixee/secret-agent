<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://secretagent.dev/</id>
    <title>SecretAgent Blog</title>
    <updated>2021-12-14T15:22:30.108Z</updated>
    <generator>Gridsome Feed Plugin</generator>
    <link rel="alternate" href="https://secretagent.dev/"/>
    <link rel="self" href="https://secretagent.dev/feed.atom"/>
    <subtitle>A blog about scraping, features and experiences developing SecretAgent</subtitle>
    <entry>
        <title type="html"><![CDATA[Moving from Chromium to Chrome]]></title>
        <id>https://secretagent.dev/blog/chromium-chrome</id>
        <link href="https://secretagent.dev/blog/chromium-chrome"/>
        <updated>2021-02-19T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
We're moving our underlying engine from Chromium to Chrome in the coming weeks. 

## Why?
There are a few reasons we decided to go this direction:
1. Chrome is the actual browser being used in the wild by consumers.
2. Chrome has increasingly diverged from Chromium. In our DoubleAgent testing, we're seeing Chrome 85-89 steadily diverge features. This makes it harder and harder to emulate Chrome when using Chromium as the engine.
3. Chrome has certain features that aren't in Chromium that will be nearly impossible to emulate (x-headers to Google sites, Widevine, etc). In theory, you could use DRM as a way to weed out Chromium users masking themselves as Chrome users.

## Chrome Version-Specific Installers 
This switch was somewhat challenging, primarily because the Chrome team doesn't openly publish versions of Chrome that stay on the version you want them on. Even on Ubuntu, if you install the .deb release, it will install an apt updater, and if you're not careful, your engine will swap out underneath you.

Our first task was to go out and find stable Chrome installations for each version. We created a new project called [chrome-versions](https://github.com/ulixee/chrome-versions) that downloads, extracts, and stores versions of Chrome for Linux, Windows and Mac. 

For each version, we stripped out the auto-update features and converted them to .tar archives that can be extracted side-by-side. They're then published on Github as release assets for each Chrome version (eg, https://github.com/ulixee/chrome-versions/releases/tag/88.0.4324.182)

On Debian/Ubuntu, Chrome often needs packages to be installed. We re-bundled the .deb control file into a new installer that can be run after you extract the chrome executable - this makes setting up CI or docker very simple for 1 or more Chrome installations.

## SecretAgent
SecretAgent has been updated to use Chrome everywhere. Our emulators have "polyfills" auto-generated for how to resemble Chrome headed when running each version headless. The changes are significant enough from Chromium that you need to actually use Chrome underneath. 

No changes should be visible in your scripts, but you might see some installation changes as you go to upgrade. We also experienced some changes in no-sandbox features when running on Docker. Your mileage here may vary. 

This new release will have an updated Dockerfile and files under `tools/docker/*` showing how to get up and running on Docker-slim.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scaling SecretAgent Scrapes with Handlers]]></title>
        <id>https://secretagent.dev/blog/handling-scale</id>
        <link href="https://secretagent.dev/blog/handling-scale"/>
        <updated>2020-12-29T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
When you start using SecretAgent, you often copy and paste the default examples. As we started to use SecretAgent on larger extraction efforts, it became clear that we didn't have a clear story for "how" you go from that starting example to running 2, or even 1000 scrapes.

As you start to think about structuring a bigger effort, a bunch of questions come up:

- Do you create a new SecretAgent instance every time? Or do you simply add tabs?
- How expensive is it to create many instances?
- How should I make sure not to overload the host machine with the number of scrapes running at the same time?
- How do I add new machines when I max out the current one?

As we explored simplifying this story, we wanted to make the progression of "examples" through to full-scrapes a smooth process. Something like this:

#### Step 1: Try Out an Example

Trying out examples should require as little setup as possible, so we added a new `default export` that's a ready-to-go client for SecretAgent.

```js
import agent from 'secret-agent';

(async () => {
  // no initilization required!
  await agent.goto('https://ulixee.org');
  const datasetLinks = await agent.document.querySelectorAll('a.DatasetSummary');
  for (const link of datasetLinks) {
    const name = await link.querySelector('.title').textContent;
    const href = await link.getAttribute('href');
    const dataset = { name, href };
    console.log('Ulixee Dataset', dataset);
  }

  await agent.close();
})();
```

#### Step 2: Run Multiple Scrapes

Agent instances are lightweight, but what do you do when you need to queue up thousands of them to run. Until now, you've been on your own to use libraries like `p-queue`, keeping track of promises, or simply waiting and looping.

We introduced a new idea into SecretAgent called a [`Handler`](/docs/basic-interfaces/handler) to help run multiple scrapes in one session. Handlers manage the concurrency of multiple scrapes to ensure your machine doesn't get overloaded and hang. We designed it so your code should require almost no changes to transition to many scrapes.

```js
import { Handler } from 'secret-agent';

(async () => {
  const handler = new Handler({ maxConcurrency: 5 });

  handler.dispatchAgent(async agent => {
    // agent is automatically created for us
    await agent.goto('https://ulixee.org');
    const datasetLinks = await agent.document.querySelectorAll('a.DatasetSummary');
    for (const link of datasetLinks) {
      const name = await link.querySelector('.title').textContent;
      const href = await link.getAttribute('href');
      const dataset = { name, href };

      // add a name to each agent so we can find each scrape on Replay
      const agentOptions = { name };
      handler.dispatchAgent(getDatasetCost, dataset, agentOptions);
    }
  });

  // only 5 agents will be active at a given time until all are done
  await handler.waitForAllDispatches();
  await handler.close();
})();

// my data gets passed in once an agent is available
async function getDatasetCost(agent, dataset) {
  let { name, href } = dataset;
  if (!href.startsWith('http')) href = `https://ulixee.org${href}`;
  console.log(href);
  await agent.goto(href);
  await agent.waitForPaintingStable();
  const cost = await agent.document.querySelector('.cost .large-text').textContent;
  console.log('Cost of %s is %s', dataset.name, cost);
}
```

#### Step 3: Add Scraping Machines

You might find that you need to increase the speed of your scrapes. So the next transition you'll likely want to make is to add remote machines. Handlers are built to round-robin between multiple [`ConnectionToCore`](/docs/advanced/connection-to-core) instances.

```js
import { Handler } from 'secret-agent';

(async () => {
  const handler = new Handler(
    {
      maxConcurrency: 5,
      host: '192.168.1.1:2300', // fictional remote secret-agent #1
    },
    {
      maxConcurrency: 5,
      host: '192.168.1.2:2300', // fictional remote secret-agent #2
    },
  );
  
// ... everything else is the same!

  handler.dispatchAgent(async agent => {
    // agent is automatically created for us
    await agent.goto('https://ulixee.org');
    ...
```


#### Default Exports

To get to this setup, you'll notice some changes in the default exports when you install SecretAgent 1.3.0-alpha.1. The default exports that come out of the `secret-agent` and `@secret-agent/client` packages is now a pre-initialized instance of the `Agent` class (`SecretAgent` was renamed to `Agent`).

[`Handler`](/docs/basic-interfaces/handler) and [`Agent`](/docs/basic-interfaces/agent) are available as exports from both the `secret-agent` and `@secret-agent/client` if you'd like to continue to use those. To customize a "Remote" `SecretAgent` for an [`Agent`](/docs/basic-interfaces/agent), you can create a new instance with a [`connectionToCore`](/docs/basic-interfaces/agent#constructor) parameter, or use the [`.configure()`](/docs/basic-interfaces/agent#configure) function.


#### That's it!

That's our change. We hope it leads to a very simple model to understand how to scale up your SecretAgent instances. Feedback is welcome as always on any of our channels (listed in header)!
]]></content>
    </entry>
</feed>